!SESSION 2022-07-02 14:20:01.267 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=1.8.0_332
java.vendor=ojdkbuild
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file D:\user\github\1\1\2022_06_dev\.metadata\.bak_0.log
Created Time: 2022-07-02 23:10:18.104

!ENTRY org.eclipse.jdt.ui 4 2 2022-07-02 23:10:18.105
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-07-02 23:10:18.106
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:20.117
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-07-02 23:10:20.118
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-07-02 23:10:20.119
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:23.133
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-07-02 23:10:23.134
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-07-02 23:10:23.135
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.190
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:10:25.191
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:10:25.191
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.199
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:10:25.200
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:10:25.200
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.207
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:10:25.208
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:10:25.208
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.215
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:10:25.216
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:10:25.216
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.224
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:10:25.225
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:10:25.226
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.232
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:10:25.233
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:10:25.234
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.241
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:10:25.241
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:10:25.242
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.249
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:10:25.250
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:10:25.251
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.258
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:10:25.258
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:10:25.259
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:251)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:386)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:362)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:10:25.643
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-07-02 23:10:25.644
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-07-02 23:10:25.645
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:11:14.183
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money;
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-07-02 23:11:14.184
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-07-02 23:11:14.185
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:11:15.683
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money;
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:306)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:192)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4005)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3633)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1158)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1047)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:658)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:557)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:154)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:150)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:657)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:594)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1447)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:11:15.684
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:306)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:192)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4005)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3633)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1158)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1047)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:658)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:557)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:154)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:150)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:657)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:594)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1447)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:11:15.684
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:306)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:192)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4005)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3633)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1158)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1047)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:658)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:557)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:154)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:150)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:657)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:594)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1447)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:11:15.690
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money;
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1022)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:306)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:192)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4005)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3633)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1158)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1047)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:658)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:557)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:154)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:150)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:657)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:594)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1447)

!ENTRY org.eclipse.ui 4 0 2022-07-02 23:11:15.691
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1022)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:306)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:192)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4005)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3633)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1158)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1047)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:658)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:557)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:154)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:150)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:657)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:594)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1447)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:11:21.791
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money;
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:11:21.792
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:11:21.793
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:11:21.802
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				int ruckyNum = 0;
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else(ruckyNum<2){
					System.out.println("꽝...");
					sche.money-=Money;
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1015)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:811)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-07-02 23:11:21.803
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1015)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:811)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-07-02 23:11:21.803
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:271)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:263)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:196)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1015)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:811)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-02 23:12:05.278
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.qeen;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class GamePrint {
	Scanner scan = new Scanner(System.in);
	static String name;
	static int birthMon = 100;
	static int birthDay = 100;
	static int month = 1;
	static int year = 15;
	static int turn = 0;
	String[] gameTurn = new String[65];
	Parameter pm = new Parameter();
	Scheduler sche = new Scheduler();

	public void prinPrint() throws InterruptedException {
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢻⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠉⣿⣿⣷⠄⢼⣿⣿⣇⣀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠙⠟⠉⠀⠈⠛⠉⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢂⣠⣤⣶⣶⣶⣶⣶⣦⣤⣀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⡿⠉⠻⠿⠙⠿⠟⠙⠿⠟⠻⣿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⡟⠀⠀⠒⠛⠃⠀⠀⠐⠛⠒⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠛⠃⠀⠀⡼⠶⡄⠀⠀⢠⠷⢦⠀⠀⠘⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠁⠀⠉⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡄⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⢠⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠉⠁⠀⠀⠀⠀⠀⠘⠤⠤⠃⠀⠀⠀⠀⠀⠀⠉⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⡀⠀⠀⠀⠀⠀⠀⠉⠉⠻⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣷⡆⢀⡀⠀⠀⢀⣠⣶⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣆⡀⠀⠀⢀⡀⠐⣶⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣷⣤⣴⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠚⢿⣿⣿⣿⣿⣿⣶⣦⣾⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣄⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⣀⡀⣀⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣶⣶⣷⣶⣷⣶⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
		Thread.sleep(100);
		System.out.println("⣿⣿⣿⣿⣿⣿      ~  Q e e n  M a k e r ~    ⣿⣿⣿⣿⣿");
		System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");

		int YesNo = 0;// 예 아니요 확인하는 변수

		while (YesNo != 1) { // 이름 입력받기
			YesNo = 0;

			System.out.println("공주님의 이름은 무엇인가요?");
			name = scan.next();

			try {
				System.out.println(name + " 공주님이 맞나요?"); // 이름확인
				System.out.println("예 1, 아니오  2");
				YesNo = scan.nextInt();
				if (YesNo != 1 && YesNo != 2) {
					System.out.println("잘못 입력하셨습니다");
				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}
		}

		do {
			YesNo = 0;

			while (birthMon > 13 || birthMon < 0) { // 월을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 월 인가요? (숫자만입력하세요)");
					birthMon = scan.nextInt();
					if (birthMon > 13 || birthMon < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (birthDay > 32 || birthDay < 0) {// 일을 입력받는다
				try {
					System.out.println("공주님의 생일은 몇 일 인가요? (숫자만입력하세요)");
					birthDay = scan.nextInt();

					if (birthDay > 32 || birthDay < 0) {
						System.out.println("잘못입력하셨습니다.");
					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

			while (YesNo != 1 && YesNo != 2) { // 생일이 맞는지 확인한다
				try {
					System.out.println("공주님의 생일은 " + birthMon + "월 " + birthDay + "일 이 맞나요?");
					System.out.println("예 1, 아니오  2");
					YesNo = scan.nextInt();

					if (YesNo != 1 && YesNo != 2) {
						System.out.println("잘못 입력하셨습니다");
					} else if (YesNo == 2) {
						System.out.println("생일을 다시입력합니다");
						birthMon = 100; // 생일을 다시 입력받기에 초기화
						birthDay = 100; // 생일을 다시 입력받기에 초기화

					}
				} catch (InputMismatchException e) {
					System.out.println("잘못된 입력입니다.");
					scan.next();
					continue;
				}
			}

		} while ((birthMon > 13 && birthMon < 0) || (birthDay > 32 && birthDay < 0) || YesNo == 2);
		// 반복문의 조건은 월을 13이상 0이하로 적지 말것, 일을 32이상 0이하로 적지 말것, 생일이 맞는지 확인시 아니오 선택했을때

		System.out.println(name + " 공주님은 " + birthMon + "월 " + birthDay + "일이 생일이시군요");

	}

	public void schedule() {

		System.out.println(name + " 공주님의 스케줄을 정합니다. 스케줄은 1달에 1번씩 4번 고를수 있습니다.");
		for (int i = 0; i < 4; i++) {

			System.out.println(year + "살 " + month + "월의 스케쥴");
			System.out.println("----------------------------------------");
			System.out.println("1. 아르바이트를 한다");
			System.out.println("2. 공부를 한다");
			System.out.println("3. 휴식한다.");
			System.out.println("4. 20살까지 아무것도 하지 않는다.");
			System.out.println("----------------------------------------");
			System.out.print(">>");
			String sel = scan.next();
			switch (sel) {
			case "1":
				scheWork();
				month++;
				break;
			case "2":
				scheStudy();
				month++;
				break;
			case "3":
				System.out.println("휴식합니다");
				gameTurn[turn] = "휴식";
				System.out.println(gameTurn[turn]);
				month++;
				turn++;
				break;
			case "4":
				i = 4;
				turn = 64;
				break;
			default:
				System.out.println("잘못된 입력입니다");
				break;

			}
		}
		if (turn < 64) {
			runSchedule();
		} else {
		}

	}

	private void runSchedule() {
		for (int i = 4; i > 0; i--) {
			System.out.println("스케쥴을 실행합니다.");
			System.out.println(name + " 공주님의 " + (month - i) + "월 스케쥴은" + gameTurn[turn - i] + " 입니다");
			System.out.println(gameTurn[turn - i] + "을 실행합니다");

			if (gameTurn[turn - i].equals("농부알바")) {
				sche.farm();
			} else if (gameTurn[turn - i].equals("식당알바")) {
				sche.cafe();

			} else if (gameTurn[turn - i].equals("보모알바")) {
				sche.child();

			} else if (gameTurn[turn - i].equals("음악교실")) {
				sche.musicschool();

			} else if (gameTurn[turn - i].equals("무술교실")) {
				sche.martial();

			} else if (gameTurn[turn - i].equals("그림교실")) {
				sche.artschool();
			} else if (gameTurn[turn - i].equals("휴식")) {
				sche.rest();
			}

		}

	}

	public void ending() {
		Ending end = new Ending();

		try {
			System.out.println(name + " 공주님은 드디어 20살이 되었습니다.");
			Thread.sleep(100);
			System.out.println(name + " 공주님에겐 어떤 미래가 기다리고 있을까요?");
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (sche.art < 10 && sche.study < 10 && sche.music < 10 && sche.cook < 10 && sche.strong < 10
				&& sche.manner < 10) {
			end.neet();
		} else if (sche.art < 30 || sche.study < 30 || sche.music < 30 || sche.cook < 30 || sche.strong < 30
				|| sche.manner < 30) {
			if (sche.farm > sche.cafe && sche.farm > sche.child) {
				// 농부엔딩
				end.endFarm();

			} else if (sche.cafe > sche.child) {
				// 식당직원 엔딩
				end.endCafe();
			} else if (sche.child > 0) {
				// 보모엔딩
				end.endChild();
			} else {
				// 프리터 엔딩
				end.freetor();
			}

		} else if (sche.art < 60 || sche.study < 60 || sche.music < 60 || sche.cook < 60 || sche.strong < 60
				|| sche.manner < 60) {
			if (sche.martial > sche.artSchool && sche.martial > sche.musicSchool) {
				// 장군엔딩
				end.genal();
			} else if (sche.artSchool > sche.musicSchool) {
				// 화가 엔딩
				end.artist();
			} else if (sche.musicSchool > 0) {
				// 음악가 엔딩
				end.musician();
			} else {
				// 공무원엔딩
				end.servent();
			}
		} else if (sche.art >= 60 && sche.study >= 60 && sche.music >= 60 && sche.cook >= 60 && sche.strong >= 60
				&& sche.manner >= 60) {
			// 여왕엔딩
		} else {
			// 공무원엔딩
			end.servent();
		}

	}

	public void scheWork() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("아르바이트를 합니다");
			System.out.println("어떤 아르바이트를 할까요?");

			try {
				Thread.sleep(300);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			System.out.println("1. 농부알바");
			System.out.println("2. 식당알바");
			System.out.println("3. 보모알바");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("농부 알바를 선택하셨습니다");
				gameTurn[turn] = "농부알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("식당 알바를 선택하셨습니다");
				gameTurn[turn] = "식당알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("보모 알바를 선택하셨습니다");
				gameTurn[turn] = "보모알바";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}
	}

	public void scheStudy() {
		String sel = "";
		종료: while (!sel.equals("1") || !sel.equals("2") || !sel.equals("3")) {
			System.out.println("공부를 합니다");
			System.out.println("어떤 공부를 할까요?");
			System.out.println("1. 음악교실");
			System.out.println("2. 무술교실");
			System.out.println("3. 그림교실");
			sel = scan.next();
			switch (sel) {
			case "1":
				System.out.println("음악교실을 선택하셨습니다");
				gameTurn[turn] = "음악교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "2":
				System.out.println("무술교실을 선택하셨습니다");
				gameTurn[turn] = "무술교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			case "3":
				System.out.println("그림교실을 선택하셨습니다");
				gameTurn[turn] = "그림교실";

				try {
					Thread.sleep(300);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				turn++;
				break 종료;
			default:
				System.out.println("잘못된 입력입니다");
				break;
			}
		}

	}

	public void printParameter() {
		System.out.println("----------- 현재 상태 ----------");
		System.out.println("힘 : " + sche.power + "  " + "근성 : " + sche.strong);
		System.out.println("학력 : " + sche.study + "  " + "요리 : " + sche.cook);
		System.out.println("음악 : " + sche.music + "  " + "미술 : " + sche.art);
		System.out.println("예절 : " + sche.manner);
		System.out.println("재산 : " + sche.money + "  " + "스트레스 : " + sche.stress);
		System.out.println("----------------------------");
	}

	public void store() {
		// TODO Auto-generated method stub
		System.out.println("⡟⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⡭⠍⠍⠭⠩⠩⠭⠉⠭⠉⠩⠭⠍⠩⠩⢩⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⣭⢻");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⢯⡃⢹⡏⢱⡟⢻⣼⣯⡿⢸⣯⠅⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⠚⠃⠈⠃⠈⠛⠛⠈⠃⠛⠘⠓⠂⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸");
		System.out.println("⣇⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸");
		System.out.println("⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿");
		System.out.println("⣿⣿⢸⣿⠛⠛⠙⠉⠋⠙⠛⣻⠉⠛⠛⠛⠙⠋⠙⠛⠛⠙⠉⠋⠛⠛⠛⠉⣿⠙⠛⠋⠛⠛⠙⠛⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠾⠀⠀⠺⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⠀⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⣿⡇⣿⣿");
		System.out.println("⣿⣿⢸⣿⣀⣀⣀⣀⣀⣀⣀⣽⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣯⣀⣀⣀⣀⣀⣀⣀⣿⡇⣿⣿");
		System.out.println("⣿⣿⣌⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣛⣣⣿⣿");
		System.out.println();
		System.out.println();
		System.out.println("상점주인 : 여기는 상점입니다.");
		System.out.println("상점주인 : 필요한걸 살수 있죠");
		System.out.println("상점주인 : 복권도 살수 있습니다.");
		System.out.println("상점주인 : 뭘 사실래요?");
		종료: while (true) {
			System.out.println("-----------------------");
			System.out.println("1. 물건을 산다");
			System.out.println("2. 복권을 산다");
			System.out.println("3. 상점을 나간다");
			System.out.println("-----------------------");
			int sel = scan.nextInt();
			System.out.print(">>");
			switch (sel) {
			case 1:// 물건 메뉴
				sale();
				break;
			case 2:// 복권메뉴
				rotto();
				break;
			case 3:
				System.out.println("상점주인 : 안녕히가세요");
				System.out.println("-----------------------");
				break 종료;
			default:
				System.out.println("다시 입력하세요");
				break;
			}

		}
	}

	public void rotto() {
		int ruckyNum = 0;
		// TODO Auto-generated method stub
		종료: while (true) {
			System.out.println("즉석 복권을 구입하실수 있습니다.");
			System.out.println("당첨되면 구입한 가격의 복권의 3배를 받습니다.");
			System.out.println("얼마를 구입하시겠습니까?");
			try {
				System.out.print(">>");
				int Money = scan.nextInt();
				if (Money > sche.money) {
					System.out.println("돈이 부족합니다");
					break 종료;
				}
				;
				System.out.println("복권 번호를 입력하세요 10 미만의 수를 3번 입력합니다.");
				int rootoNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					System.out.println(">>");
					rootoNum[i] = scan.nextInt();
					if (rootoNum[i] > 9 || rootoNum[i] < 1) {
						System.out.println("잘못 입력하셨습니다");
						break;
					}
				}
				Random random = new Random();
				int ranNum[] = new int[3];
				for (int i = 0; i < 3; i++) {
					ranNum[i] = random.nextInt(9) + 1;
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == ranNum[j]) {
							i--;
						}
					}
				}

				System.out.println("당첨번호 : " + ranNum[0] + ", " + ranNum[1] + ", " + ranNum[2]);
				
				for (int i = 0; i < 3; i++) {
					for (int j = 0; j < i; j++) {
						if (ranNum[i] == rootoNum[j]) {
							ruckyNum++;
						}
					}
				}
				if(ruckyNum>=2) {
					System.out.println("당첨되셨습니다!");
					System.out.println(Money*3+"원을 얻으셨습니다");
					sche.money +=Money*2;
				}else (ruckyNum < 2){
					System.out.println("꽝...");
					sche.money -= Money;
				}
				break 종료;

			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}
	}

	public void sale() {
		// TODO Auto-generated method stub
		종료: while (true) {
			try {
				System.out.println("1. 악보 : 음악 10 상승/ 30g");
				System.out.println("2. 인형 : 스트레스 30하락/ 30g");
				System.out.println("3. 목검 : 힘 10상승 근성 5 상승/ 30g");
				System.out.println("4. 책  : 학력 10 상승 예절 10 상승/ 30g");
				System.out.println("5. 냄비 : 요리 10 상승/ 30g");
				System.out.println("6.  붓 : 그림 10 상승/ 30g");
				System.out.println("7. 구입종료");
				System.out.println(">>");
				int sel = scan.nextInt();
				if (sche.money < 30) {
					System.out.println("돈이 부족합니다.");
					break 종료;
				}
				switch (sel) {
				case 1:
					System.out.println("악보를 구입하셨습니다.");
					sche.music += 10;
					sche.money -= 30;
					System.out.println("음악이 10 상승합니다, 재산이 30g 락합니다");
					break;
				case 2:
					System.out.println("인형을 구입하셨습니다.");
					sche.stress -= 30;
					sche.money -= 30;
					System.out.println("스트레스가 30 하락합니다, 재산이 30g 하락합니다");
					break;
				case 3:
					System.out.println("목검을 구입하셨습니다.");
					sche.power += 10;
					sche.strong += 5;
					sche.money -= 30;
					System.out.println("힘이 10 상승합니다 근성이 5 상승합니다, 재산이 30g 하락합니다");
					break;
				case 4:
					System.out.println("책을 구입하셨습니다.");
					sche.study += 10;
					sche.manner += 10;
					sche.money -= 30;
					System.out.println("학력이 10 상승합니다 예절이 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 5:
					System.out.println("냄비를 구입하셨습니다.");
					sche.cook += 10;
					sche.money -= 30;
					System.out.println("요리가 10 상승합니다, 재산이 30g 하락합니다");
					break;
				case 6:
					System.out.println("붓을 구입하셨습니다.");
					sche.art += 10;
					sche.money -= 30;
					System.out.println("그림이 10 상승합니다, 재산이 30g 하락합니다");

					break;
				case 7:
					System.out.println("구입을 종료합니다");
					break 종료;
				default:
					System.out.println("다시 입력하세요");
					break;

				}
			} catch (InputMismatchException e) {
				System.out.println("잘못된 입력입니다.");
				scan.next();
				continue;
			}

		}

	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-07-02 23:12:05.279
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-07-02 23:12:05.279
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
!SESSION 2022-07-03 00:19:48.107 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=1.8.0_332
java.vendor=ojdkbuild
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-07-03 00:19:56.915
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-07-03 00:19:56.915
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@16c1d11,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@123d0816,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-07-03 00:20:06.387
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\user'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-07-03 03:16:10.497 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=1.8.0_332
java.vendor=ojdkbuild
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-07-03 03:16:45.162
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-07-03 03:16:45.162
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4e210016,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2fc40856,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-07-03 03:16:54.979
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\user'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-07-03 13:42:37.235 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=1.8.0_332
java.vendor=ojdkbuild
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-07-03 13:42:56.315
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-07-03 13:42:56.315
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57ed8f95,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1c25deb0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-07-03 13:43:14.761
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\user'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.eclemma.core 4 5013 2022-07-03 17:59:48.655
!MESSAGE Error while dumping coverage data (code 5013).
!STACK 0
java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:210)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at java.net.SocketInputStream.read(SocketInputStream.java:224)
	at java.io.FilterInputStream.read(FilterInputStream.java:83)
	at org.jacoco.core.data.ExecutionDataReader.read(ExecutionDataReader.java:84)
	at org.eclipse.eclemma.internal.core.MemoryExecutionDataSource.readFrom(MemoryExecutionDataSource.java:69)
	at org.eclipse.eclemma.internal.core.launching.AgentServer.run(AgentServer.java:115)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-07-03 18:47:59.562
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package make.topokki;

import java.util.Scanner;

public class Nembi_Store {
	public int tock;
	public int gochujang;
	public int odeng;
	public int dangmen;
	public int egg;
	public int dashida;
	Topoki_Client tc = new Topoki_Client();

	public void nembi() {
		try {
			Thread.sleep(300);
			System.out.println("===========================");
			Thread.sleep(300);
			System.out.println("냄비를 확인합니다");
			Thread.sleep(300);

			System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢡⣾⣿⣿⣷⡆⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⢛⣉⠭⠥⠼⠛⣿⣿⠛⠓⠬⠭⣍⣛⠻⢿⣿⣿⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⡿⢋⡴⠊⠁⠀⠀⠀⠀⠾⣿⣿⡿⠀⠀⠀⠀⠈⠙⠢⡙⢿⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⢡⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡆⢻⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⢸⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⡾⡟⢸⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⣆⠫⣛⠶⣤⣄⡀⠀⠀⠀⠀⠀⣀⣀⣀⣤⣴⠶⠛⢁⡴⣡⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⣿⣷⣬⣑⠲⠭⢿⣛⣛⣛⣛⣛⣛⣉⣉⡡⠤⠖⣊⣡⣶⣿⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⣿⣿⣿⠟⢛⣉⠤⠤⠔⠒⠒⠒⠒⠢⠤⠤⣌⣙⠻⢿⣿⣿⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⡿⢋⠴⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠢⡙⢿⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⡿⢁⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠻⢿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⡿⢡⣶⣿⢰⣆⠀⠀⠀⠀⣀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠀⢀⣀⠀⣿⣿⣆⢻⣿");
			Thread.sleep(300);
			System.out.println("⣿⡇⢿⣿⣿⣆⠻⣦⣴⡞⠛⠋⠉⠉⠉⠉⠉⠙⠛⣛⣿⣶⠟⠋⣠⣿⣿⣿⢸⣿");
			Thread.sleep(300);
			System.out.println("⣿⣷⣌⠛⢿⡛⠃⠀⠉⠛⠿⠶⠶⠶⠶⠶⠿⠿⠛⠋⠉⠀⠀⠘⠛⡿⠟⣡⣾⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⠨⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⡆⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢃⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⣿⣌⠣⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠔⣡⣾⣿⣿⣿⣿");
			Thread.sleep(300);
			System.out.println("⣿⣿⣿⣿⣿⣿⣷⣦⣍⣓⠒⠲⠤⠤⠤⠤⠤⠤⠔⠒⣒⣩⣴⣾⣿⣿⣿⣿⣿⣿");
			Thread.sleep(300);

			System.out.println("냄비에는 ....");
			System.out.println("떡볶이가 " + tock + "개");
			System.out.println("어묵이 " + odeng + "개");
			System.out.println("고추장이 " + gochujang + "개");
			System.out.println("당면이 " + dangmen + "개");
			System.out.println("삶은 달걀이 " + egg + "개");
			System.out.println("고양이맛 다싯다가 " + dashida + "개");
			System.out.println("있습니다");

			String ox = "";
			while (!ox.equalsIgnoreCase("o") || !ox.equalsIgnoreCase("x")) {
				System.out.println("떡볶이를 만드시겠습니까?");
				Scanner scan = new Scanner(System.in);
				System.out.print("ox로 대답하세요 >>");
				ox = scan.next();
				if (ox.equalsIgnoreCase("o")) {
					if (tock < 1 && gochujang < 1 && odeng < 1 && dangmen < 1 && egg < 1 && dashida < 1) {
						System.out.println("재료가 부족합니다");
						break;
					} else {
						System.out.println("떡복이를 만듭니다!");
						Thread.sleep(300);
						System.out.println("⣿⣿⣿⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠛⠉⠉⠙⢿⣿⣿⣿⣿⣿");
						Thread.sleep(300);
						System.out.println("⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿");
						Thread.sleep(300);
						System.out.println("⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⣿⣿⠛⠉⠙⠿⣿⣇⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿");
						Thread.sleep(300);
						System.out.println("⣿⣿⣿⣿⣷⣤⣤⡀⢀⠴⠞⢟⡃⠀⠀⠀⠀⠈⡛⠗⢶⢤⣤⣶⣿⣿⣿⣿⣿⣿");
						Thread.sleep(300);
						System.out.println("⣿⣿⣿⣿⣿⣿⢛⣡⣦⣾⣿⣿⠇⠀⠀⠀⠀⡀⣿⠀⢀⣦⠈⠛⠿⢿⣿⣿⣿⣿");
						Thread.sleep(300);
						System.out.println("⣿⣿⣿⠿⠋⣦⣾⣿⣿⡟⠁⢿⣠⣴⣢⢤⣺⣧⣄⡠⠊⠀⡷⠋⣱⣷⠈⣿⣿⣿");
						Thread.sleep(300);
						System.out.println("⡿⠿⠏⣷⡀⢼⣿⠿⠿⠶⢽⣿⣿⣿⣿⣿⣿⣿⡿⢁⠤⢼⠁⠰⠋⣸⡀⠘⠛⢿");
						Thread.sleep(300);
						System.out.println("⠁⠀⠀⣹⣷⢺⡇⠀⠀⠀⢠⠿⠿⠿⣿⣿⣿⢫⡳⢠⢿⡎⢀⣶⡔⠟⡸⠀⠀⠀");
						Thread.sleep(300);
						System.out.println("⣄⠀⠀⠇⠌⡟⠓⠤⢤⠤⠃⠀⠀⠀⡿⢿⠃⣺⡇⡾⣽⠁⠼⣿⢇⡴⠁⢀⢀⣸");
						Thread.sleep(300);
						System.out.println("⣿⣿⣧⠈⠲⢧⣄⣀⣼⡀⠀⠀⢀⡰⠁⡌⣘⡾⢰⣽⢣⢁⣙⡥⠊⠀⢠⣿⣿⣿");
						Thread.sleep(300);
						System.out.println("⣿⣿⣿⣧⡀⠀⠀⠉⠉⠙⠛⠛⠛⠛⠛⠓⠛⠓⠒⠒⠙⠉⠁⠀⠀⣠⣿⣿⣿⣿");
						Thread.sleep(300);
						System.out.println("⣿⣿⣿⣿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣿⣿");
						Thread.sleep(300);
						System.out.println("⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣤⣄⣀⣀⣀⣀⣀⣀⣀⣤⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿");

						System.out.println("맛있다!!! ");
						System.out.println("떡볶이 만들기 성공!");
						tc.topoki = true;

					}
				}

				else if (ox.equalsIgnoreCase("x")) {
					break;

				} else {
					System.out.println("잘못입력하셨습니다.");
				}
			}

		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void store() {
		Scanner scan = new Scanner(System.in);
		System.out.println("=======================");
		try {
			Thread.sleep(300);
			System.out.println("상점에 도착했습니다.");
			Thread.sleep(300);

			System.out.println("⣯⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⣹");
			Thread.sleep(300);
			System.out.println("⣿⣶⣶⣶⣶⣶⣶⣶⣶⡆⢤⠄⢤⠤⡤⢤⢠⢤⢠⠀⢰⣶⣶⣶⣶⣶⣶⣶⣶⣿");
			Thread.sleep(300);
			System.out.println("⣿⣻⣿⣻⣛⣻⡿⠛⡻⠇⠒⠃⠘⠀⠓⠚⠘⠑⠘⠀⢸⡿⣿⡿⡿⡟⣿⣛⣿⣿");
			Thread.sleep(300);
			System.out.println("⣏⡻⠛⣯⣯⣯⣼⣴⣤⣥⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣼⣿⣿⣿⣷⣯⣯⠛⢅⣻");
			Thread.sleep(300);
			System.out.println("⣿⡇⠀⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠿⠀⢸⣿");
			Thread.sleep(300);
			System.out.println("⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿");
			Thread.sleep(300);
			System.out.println("⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿");
			Thread.sleep(300);
			System.out.println("⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠀⠀⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿");
			Thread.sleep(300);
			System.out.println("⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿");
			Thread.sleep(300);
			System.out.println("⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿");
			Thread.sleep(300);
			System.out.println("⣿⣧⣠⣤⣤⣤⣤⣤⣠⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣀⣼⣿");
			Thread.sleep(300);

			System.out.println("=====================");
			System.out.println("무엇을 구입하시겠습니까?");
			System.out.println("1.떡볶이 떡 : 3000원");
			System.out.println("2.고추창 : 5000원");
			System.out.println("3.어묵 : 5000원");
			System.out.println("4.넓적당면 : 8000원");
			System.out.println("5.삶은 달걀 : 1000원");
			System.out.println("6.고양이맛 다싯다 : 2000원");
			System.out.println("7.구입을 종료합니다");

			종료: while (true) {
				System.out.println(">>");
				String sel = scan.next();
				switch (sel) {
				case "1":
					System.out.println("떡볶이를 1개 구매합니다");
					if(tc.money<3000) {System.out.println("금액이 부족합니다");
						}else {tc.money - 3000}
					break;
				case "2":
					System.out.println("떡볶이를 1개 구매합니다");
					if(tc.money<3000) {System.out.println("금액이 부족합니다");
						}else {}
					break;
				case "3":
					break;
				case "4":
					break;
				case "5":
					break;
				case "6":
					break;
				case "7":
					break 종료;
				default:
					System.out.println("잘못입력하셨습니다");
					break;
				}

			}

		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2977)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-07-03 18:47:59.564
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2977)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-07-03 18:47:59.586
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3750)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3087)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2977)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3401)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3015)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2311)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2971)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2986)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3302)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:450)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:200)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1138)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1315)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
!SESSION 2022-07-04 09:04:37.725 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=1.8.0_332
java.vendor=ojdkbuild
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-07-04 09:06:15.036
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-07-04 09:06:15.036
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@7164e28a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@1b881f1f,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-07-04 09:06:33.020
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\user'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-07-05 00:34:43.432 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=1.8.0_333
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-07-05 00:34:56.173
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-07-05 00:34:56.173
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@63896cf7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3f838072,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-07-05 00:35:06.563
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\user'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-07-05 09:05:28.210 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=1.8.0_333
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-07-05 09:06:36.345
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-07-05 09:06:36.345
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c6efee3,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57ac236a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-07-05 09:06:50.165
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\user'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-07-06 09:03:13.117 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=1.8.0_333
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-07-06 09:04:09.425
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-07-06 09:04:09.425
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57ac236a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@4542af89,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-07-06 09:04:20.895
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\user'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2022-07-06 20:30:41.381 -----------------------------------------------
eclipse.buildId=4.16.0.I20200604-0540
java.version=1.8.0_333
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-07-06 20:31:03.726
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-07-06 20:31:03.726
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2c6efee3,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@57ac236a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2022-07-06 20:31:23.152
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\user'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
